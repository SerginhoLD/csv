<?php
/**
 * CSV Parser
 * 
 * @author Sergey Zubrilin https://github.com/SerginhoLD
 * 
 * @link https://en.wikipedia.org/wiki/Comma-separated_values
 * @link https://www.rfc-editor.org/rfc/rfc4180.txt RFC 4180
 * @link http://tradeincome.ru/useful-content/RFC%204180%20rus.pdf RFC 4180 –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 * 
 * @license MIT
 */

namespace SerginhoLD\CSV;

use SerginhoLD\CSV\Exception\FileNotFoundException;
use SerginhoLD\CSV\Exception\WrongFileMimeTypeException;

/**
 * Class Parser
 * @package SerginhoLD\CSV
 */
class Parser extends \ArrayObject
{
    /**
     * @var string –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏
     */
    const CRLF = "\r\n";
    
    /**
     * @var string –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
     */
    protected $delimiter = ',';
    
    /**
     * @var string –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –ø–æ–ª–µ–π (–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
     */
    protected $enclosure = '"';
    
    /**
     * @var array Mime-—Ç–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    protected $mimeTypes = [
        'text/plain',
        'text/csv',
        'text/tsv',
        'application/vnd.ms-excel'
    ];
    
    /**
     * @var string
     */
    protected $inputEncoding = 'UTF-8';
    
    /**
     * @var string
     */
    protected $outputEncoding = 'UTF-8';
    
    /**
     * @var bool –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ–ª–µ–π
     */
    protected $withHeaders = false;
    
    /**
     * @var array –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π
     */
    protected $headers = [];
    
    /**
     * @var \finfo
     * @see http://php.net/manual/ru/class.finfo.php
     */
    protected static $finfo;
    
    /**
     * @var bool –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º, —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫ —Å—Ç—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω CRLF
     */
    protected $strictMode = false;
    
    /**
     * {@inheritdoc}
     */
    public function __construct($input = [], $flags = 0, $iterator_class = "ArrayIterator")
    {
        if (!(self::$finfo instanceof \finfo))
        {
            self::$finfo = new \finfo;
        }
        
        parent::__construct($input, $flags, $iterator_class);
    }
    
    /**
     * –†–∞–∑–±–æ—Ä CSV
     * 
     * @param string $data CSV
     * 
     * @return $this
     */
    public function parse($data)
    {
        // http://php.net/manual/ru/regexp.reference.escape.php#108096 ü§î
        $newlinePattern = $this->strictMode ? self::CRLF : "\R";
        
        $rows = preg_split("/$newlinePattern/", self::encode($data, $this->inputEncoding, $this->outputEncoding));
        
        $issetNextRow = true;
        $index = key($rows);
        $maxRowSize = 0;
        
        while ($issetNextRow)
        {
            next($rows);
            $nextIndex = key($rows);
            $issetNextRow = isset($rows[$nextIndex]);
            
            $row = &$rows[$index];
            $countEnclosure = mb_substr_count($row, $this->enclosure, $this->outputEncoding);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –ø–æ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ.
            // –ï—Å–ª–∏ –∏—Ö –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ, –∑–Ω–∞—á–∏—Ç –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–ª–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∏–º–≤–æ–ª —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏,
            // –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–º –∑–∞–Ω–æ–≤–æ.
            if ($countEnclosure % 2 !== 0 && $issetNextRow)
            {
                $row .= self::CRLF . $rows[$nextIndex];
                unset($rows[$nextIndex]);
                
                prev($rows);
            }
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            else if (trim($row) === '')
            {
                unset($rows[$index]);
                $index = $nextIndex;
            }
            else
            {
                $row = self::parseString($row, $this->delimiter, $this->enclosure);
                $index = $nextIndex;
                
                $rowSize = count($row);
                $maxRowSize = ($rowSize > $maxRowSize) ? $rowSize : $maxRowSize;
            }
        }
        
        // –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –ø–æ –≤—Å–µ–º—É —Ñ–∞–π–ª—É,
        // –ø–æ —ç—Ç–æ–º—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ –≤–µ–ª–∏—á–∏–Ω—ã `$maxRowSize`.
        $rows = self::arrayPadMap(array_values($rows), $maxRowSize);
        
        if ($this->withHeaders)
        {
            $this->headers = $rows[0];
            unset($rows[0]);
            
            $rows = self::arrayCombineMap($this->headers, array_values($rows));
        }
        
        $this->exchangeArray($rows);
        
        return $this;
    }
    
    /**
     * –†–∞–∑–±–æ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     * 
     * Magic! ‚ú®
     * –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä `$escape` –≤ `str_getcsv` —Ä–∞–≤–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—É `$enclosure`.
     * –ö–∞–∫-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É—è, –∏–±–æ RFC 4180 (–ü–æ–ª—è —Å–æ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–∞–º–∏ –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è –≤ –∫–∞–≤—ã—á–∫–∏).
     * 
     * @param string $str
     * @param string $delimiter
     * @param string $enclosure
     * 
     * @return array
     */
    public static function parseString($str, $delimiter, $enclosure)
    {
        return str_getcsv($str, $delimiter, $enclosure, $enclosure);
    }
    
    /**
     * –†–∞–∑–±–æ—Ä CSV-—Ñ–∞–π–ª–∞
     *
     * @param string $path
     *
     * @throws FileNotFoundException
     * @throws WrongFileMimeTypeException
     *
     * @return $this
     */
    public function parseFile($path)
    {
        if (!in_array($this->getFileMimeType($path), $this->mimeTypes, true))
        {
            throw new WrongFileMimeTypeException($path);
        }
        
        $data = null;
        $file = fopen($path, 'r');
        
        if ($file)
        {
            while (($buffer = fgets($file)) !== false)
            {
                $data .= $buffer;
            }
            
            fclose($file);
        }
        
        return $this->parse($data);
    }
    
    /**
     * –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     *
     * @param mixed $index
     * @param array $values One-dimensional array
     *
     * @throws \InvalidArgumentException
     */
    public function offsetSet($index, $values)
    {
        if (!is_array($values) || count(array_filter($values, 'is_array')))
        {
            throw new \InvalidArgumentException('Argument `$values` is not a one-dimensional array');
        }
        
        // –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –ø–æ –≤—Å–µ–º—É —Ñ–∞–π–ª—É.
        $csvFirstRowKey = key($this->getArrayCopy());
        
        if (null !== $csvFirstRowKey)
        {
            $newRowSize = count($values);
            $csvRowSize = count($this[$csvFirstRowKey]);
            
            if ($csvRowSize > $newRowSize)
            {
                $values = array_pad($values, $csvRowSize, null);
            }
            else if ($csvRowSize < $newRowSize)
            {
                $this->exchangeArray(self::arrayPadMap($this->getArrayCopy(), $newRowSize));
            }
        }
        
        if ($this->issetHeaders())
        {
            $values = array_combine($this->getHeaders(), $values);
        }
        
        parent::offsetSet($index, $values);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
     *
     * @param array $values One-dimensional array
     */
    public function append($values)
    {
        $this->offsetSet(null, $values);
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –≤ CSV-—Ñ–æ—Ä–º–∞—Ç
     * 
     * @return string
     */
    public function __toString()
    {
        $enclosureChars = [$this->delimiter, "\n", "\r"]; // and $this->enclosure
        $rows = $this->getArrayCopy();
        
        if ($this->issetHeaders())
        {
            $rows = array_merge([$this->headers], $rows);
        }
        
        return implode(self::CRLF, array_map(function($row) use ($enclosureChars) {
            
            return implode($this->delimiter, array_map(function($cell) use ($enclosureChars) {
                
                $countEnclosure = mb_substr_count($cell, $this->enclosure, $this->outputEncoding);
                $flagEnclosure = false;
                
                if ($countEnclosure)
                {
                    $cell = str_replace($this->enclosure, ($this->enclosure . $this->enclosure), $cell);
                    $flagEnclosure = true;
                }
                else
                {
                    // –í–º–µ—Å—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mb_substr_count –ø–æ 4 —Ä–∞–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ü§î
                    foreach ($enclosureChars as $char)
                    {
                        if (mb_substr_count($cell, $char, $this->outputEncoding))
                        {
                            $flagEnclosure = true;
                            break;
                        }
                    }
                }
                
                if ($flagEnclosure)
                {
                    $cell = $this->enclosure . $cell . $this->enclosure;
                }
                
                return $cell;
                
            }, $row));
            
        }, $rows));
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV-—Ñ–∞–π–ª
     * @see http://php.net/manual/ru/function.file-put-contents.php
     * 
     * @param string $path
     * @param $flags
     * 
     * @return int|false
     */
    public function saveToFile($path, $flags = LOCK_EX)
    {
        return file_put_contents($path, (string)$this, $flags);
    }
    
    /**
     * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π
     * 
     * @param bool $flag
     * 
     * @return $this
     */
    public function withHeaders($flag = true)
    {
        $this->withHeaders = $flag;
        return $this;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π
     * 
     * @param array $headers
     * @param bool $deleteFirstRow –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
     * 
     * @return $this
     */
    public function setHeaders(array $headers, $deleteFirstRow = false)
    {
        $this->headers = $headers;
        
        if ($this->count())
        {
            if ($deleteFirstRow)
            {
                $firstRowKey = key($this->getArrayCopy());
                unset($this[$firstRowKey]);
            }
            
            $this->exchangeArray(self::arrayCombineMap($headers, $this->getArrayCopy()));
        }
        
        return $this->withHeaders(true);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π
     * 
     * @return array
     */
    public function getHeaders()
    {
        return $this->headers;
    }
    
    /**
     * @return bool
     */
    public function issetHeaders()
    {
        return $this->withHeaders && !empty($this->getHeaders());
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–ª–µ–π
     * 
     * @param string $delimiter
     * 
     * @return $this
     */
    public function setDelimiter($delimiter)
    {
        $this->delimiter = $delimiter;
        return $this;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–ª–µ–π
     *
     * @return string
     */
    public function getDelimiter()
    {
        return $this->delimiter;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–æ–ª–µ–π
     *
     * @param string $enclosure
     * 
     * @return $this
     */
    public function setEnclosure($enclosure)
    {
        $this->enclosure = $enclosure;
        return $this;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–æ–ª–µ–π
     *
     * @return string
     */
    public function getEnclosure()
    {
        return $this->enclosure;
    }
    
    /**
     * @param string $str
     * @param string $inputEncoding
     * @param string $outputEncoding
     * 
     * @return string
     */
    public static function encode($str, $inputEncoding, $outputEncoding)
    {
        if ($inputEncoding !== $outputEncoding)
        {
            $str = mb_convert_encoding($str, $outputEncoding, $inputEncoding);
        }
        
        return $str;
    }
    
    /**
     * @param array $array One-dimensional array
     * @param string $inputEncoding
     * @param string $outputEncoding
     * 
     * @return array
     */
    public static function encodeArray(array $array, $inputEncoding, $outputEncoding)
    {
        if ($inputEncoding !== $outputEncoding)
        {
            $array = array_map(function($str) use ($inputEncoding, $outputEncoding) {
                return self::encode($str, $inputEncoding, $outputEncoding);
            }, $array);
        }
        
        return $array;
    }
    
    /**
     * @param string $encoding
     * 
     * @return $this
     */
    public function setInputEncoding($encoding)
    {
        $this->inputEncoding = $encoding;
        return $this;
    }
    
    /**
     * @return string
     */
    public function getInputEncoding()
    {
        return $this->inputEncoding;
    }
    
    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤—ã–≤–æ–¥–∞ –∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
     * 
     * @param string $encoding
     * 
     * @return $this
     */
    public function setOutputEncoding($encoding)
    {
        if ($encoding !== $this->outputEncoding)
        {
            $countHeaders = count($this->headers);
            
            if ($countHeaders)
            {
                $this->headers = self::encodeArray($this->headers, $this->outputEncoding, $encoding);
            }
            
            if ($this->count())
            {
                $this->exchangeArray(array_map(function($row) use ($encoding, $countHeaders) {
                    
                    if ($countHeaders)
                    {
                        $row = array_combine($this->headers, $row);
                    }
                    
                    return self::encodeArray($row, $this->outputEncoding, $encoding);
                    
                }, $this->getArrayCopy()));
            }
        }
        
        $this->outputEncoding = $encoding;
        return $this;
    }
    
    /**
     * @return string
     */
    public function getOutputEncoding()
    {
        return $this->outputEncoding;
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç mime-—Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSV-—Ñ–∞–π–ª–æ–≤
     * 
     * @param string $mimeType
     * 
     * @return $this
     */
    public function addMimeType($mimeType)
    {
        $this->mimeTypes[] = $mimeType;
        return $this;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mime-—Ç–∏–ø —Ñ–∞–π–ª–∞
     * 
     * @param string $path
     * @throws FileNotFoundException
     * 
     * @return string
     */
    public function getFileMimeType($path)
    {
        if (!is_file($path))
        {
            throw new FileNotFoundException($path);
        }
        
        return self::$finfo->file($path, FILEINFO_MIME_TYPE);
    }
    
    /**
     * @param array $keys One-dimensional array
     * @param array $array Two-dimensional array
     * 
     * @return array
     */
    public static function arrayCombineMap(array $keys, array $array)
    {
        return array_map(function($row) use ($keys) {
            return array_combine($keys, $row);
        }, $array);
    }
    
    /**
     * @param array $array Two-dimensional array
     * @param int $size
     * @param mixed $value
     * 
     * @return array
     */
    public static function arrayPadMap(array $array, $size, $value = null)
    {
        return array_map(function($row) use ($size, $value) {
            return array_pad($row, $size, $value);
        }, $array);
    }
    
    /**
     * –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSV –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
     * 
     * @return array
     */
    public function __invoke()
    {
        return $this->getArrayCopy();
    }
}